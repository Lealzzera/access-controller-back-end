// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Child {
  id            String                  @id @default(uuid())
  name          String
  cpf           String                  @unique
  birthDate     DateTime?               @db.Date
  picture       String?
  createdAt     DateTime                @default(now())
  deletedAt     DateTime?
  responsible   ResponsibleOnChildren[]
  institution   Institution             @relation(fields: [institutionId], references: [id])
  institutionId String
  period        Period?                 @relation(fields: [periodId], references: [id])
  periodId      String?
  Grade         Grade?                  @relation(fields: [gradeId], references: [id])
  gradeId       String?

  @@map("children")
}

model Responsible {
  id           String                     @id @default(uuid())
  name         String
  email        String                     @unique
  cpf          String?                    @unique
  password     String
  street       String?
  neighborhood String?
  city         String?
  state        String?
  cep          String?
  picture      String?
  children     ResponsibleOnChildren[]
  deletedAt    DateTime?
  createdAt    DateTime                   @default(now())
  institutions ResponsibleOnInstitution[]
  role         Role

  @@map("responsible")
}

model Institution {
  id           String                     @id @default(uuid())
  cnpj         String?                    @unique
  name         String
  street       String?
  neighborhood String?
  city         String?
  state        String?
  cep          String?
  picture      String?
  email        String                     @unique
  responsible  String
  password     String
  children     Child[]
  createdAt    DateTime                   @default(now())
  deletedAt    DateTime?
  responsibles ResponsibleOnInstitution[]
  role         Role
  periods      Period[]
  grades       Grade[]

  @@map("institutions")
}

model Period {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  institution Institution @relation(fields: [institutionId], references: [id])

  children      Child[]
  institutionId String

  @@map("periods")
}

model Grade {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  children  Child[]

  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String

  @@map("grades")
}

model Kinship {
  id           String                  @id @default(uuid())
  name         String                  @unique
  value        Int                     @unique
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  responsibles ResponsibleOnChildren[]
}

model ResponsibleOnChildren {
  childId       String
  responsibleId String
  kinshipId     String?
  notAllowed    Boolean?

  child       Child       @relation(fields: [childId], references: [id])
  responsible Responsible @relation(fields: [responsibleId], references: [id])
  kinship     Kinship?    @relation(fields: [kinshipId], references: [id])

  @@id([childId, responsibleId])
  @@map("responsibleOnChildren")
}

model ResponsibleOnInstitution {
  institutionId String
  responsibleId String
  institution   Institution @relation(fields: [institutionId], references: [id])
  responsible   Responsible @relation(fields: [responsibleId], references: [id])

  @@id([institutionId, responsibleId])
  @@map("responsibleOnInstitution")
}

enum Role {
  INSTITUTION
  RESPONSIBLE
}
